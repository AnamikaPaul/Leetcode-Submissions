{"id":596559366,"lang":"java","time":"1 week, 5 days","timestamp":1638568287,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/596559366/","is_pending":"Not Pending","title":"01 Matrix","memory":"41.5 MB","code":"class Solution {\n    public int[][] updateMatrix(int[][] mx) {\n        int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        int m = mx.length, n = mx[0].length;\n        Queue<int[]> q = new LinkedList<>();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mx[i][j] == 0) q.offer(new int[] {i, j});\n                else mx[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        while(!q.isEmpty()){\n            int[] curr = q.poll();\n            for (int[] d : dir) {\n                int r = curr[0] + d[0];\n                int c = curr[1] + d[1];\n                if (r >= 0 && r < m && c >= 0 && c < n && mx[r][c] > mx[curr[0]][curr[1]] + 1) {\n                    q.offer(new int[] {r, c});\n                    mx[r][c] = mx[curr[0]][curr[1]] + 1;\n                }\n            }\n        }\n        return mx;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix"}