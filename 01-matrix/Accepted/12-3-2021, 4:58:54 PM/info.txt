{"id":596561538,"lang":"java","time":"1 week, 5 days","timestamp":1638568734,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/596561538/","is_pending":"Not Pending","title":"01 Matrix","memory":"42.4 MB","code":"class Solution {\n   \n\n    public int[][] updateMatrix(int[][] mat) {\n        int[][] dist = new int[mat.length][mat[0].length];\n    for(int i = 0; i < mat.length; i++) {\n        Arrays.fill(dist[i], Integer.MAX_VALUE -100000);\n    }\n    //start from the top of the array and fill each of the cell of the dist matrix with values from\n\t//top and left. We do not have right and bottom yet as they are empty(or filled with max \n\t//integer like in our case\n\t\n    for(int i=0;i<mat.length;i++)\n    {\n        for(int j=0;j<mat[0].length;j++)\n        {\n            if(mat[i][j]==0)\n                dist[i][j]=0;\n            else{\n                if(i>0)\n                    dist[i][j] = Math.min(dist[i][j],dist[i-1][j]+1);\n                if(j>0)\n                    dist[i][j] = Math.min(dist[i][j],dist[i][j-1]+1);\n            }    \n        }\n    }\n\t//start from the bottom of the array and fill each of the cell of the dist matrix with values from \n\t//right and bottom.\n\t\n    for(int i=mat.length-1;i>=0;i--)\n    {\n        for(int j=mat[0].length-1;j>=0;j--)\n        {   \n            if(i<mat.length-1)\n                dist[i][j] = Math.min(dist[i][j],dist[i+1][j]+1);\n            if(j<mat[0].length-1)\n                dist[i][j] = Math.min(dist[i][j],dist[i][j+1]+1);   \n        }\n    }\n   return dist;\n}}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix"}