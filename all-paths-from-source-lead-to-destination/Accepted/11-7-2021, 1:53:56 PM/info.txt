{"id":583554783,"lang":"java","time":"1 month, 1 week","timestamp":1636311236,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/583554783/","is_pending":"Not Pending","title":"All Paths from Source Lead to Destination","memory":"41.3 MB","code":"class Solution {\n    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {\n        Map<Integer, List<Integer>> graph = new HashMap();\n        for (int[] edge : edges) {\n            graph.putIfAbsent(edge[0], new ArrayList());\n            graph.get(edge[0]).add(edge[1]);\n        }\n        return dfs(graph, source, destination, new HashSet());\n    }\n    \n    boolean dfs(Map<Integer, List<Integer>> graph, int curPos, int destination, Set<Integer> visited) {\n        if (!graph.containsKey(curPos)) {    // leaf node\n            return curPos == destination;\n        }\n        \n        for (int neighbor : graph.get(curPos)) {\n            if (visited.contains(neighbor)) return false;  // That means there is a loop in the path\n            visited.add(neighbor);\n            if (!dfs(graph, neighbor, destination, visited)) {\n                return false;\n            }\n            visited.remove(neighbor);\n        }\n        \n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"all-paths-from-source-lead-to-destination"}