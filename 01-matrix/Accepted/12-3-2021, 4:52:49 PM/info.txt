{"id":596559751,"lang":"java","time":"1 week, 5 days","timestamp":1638568369,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/596559751/","is_pending":"Not Pending","title":"01 Matrix","memory":"41.5 MB","code":"class Solution {\n   private static class Pair {\n        int x;\n        int y;\n\n        Pair(int x, int y) {\n          this.x = x;\n          this.y = y;\n        }  \n    }\n    \n    public static int[][] calls = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n    \n    public int[][] updateMatrix(int[][] matrix) {\n          Queue<Pair> que = new ArrayDeque<>();\n          for(int i = 0; i < matrix.length; i++) {\n              for(int j = 0; j < matrix[0].length; j++) {\n                  if(matrix[i][j] == 1)\n                      matrix[i][j] = -1;\n                  else\n                      que.add(new Pair(i, j));\n              }\n          }\n\n          while(que.size() > 0) {\n              Pair pq = que.remove();\n              for(int i = 0; i < 4; i++) {\n                  int nr = pq.x + calls[i][0];\n                  int nc = pq.y + calls[i][1];\n                  if(nr >= 0 && nc >= 0 && nr < matrix.length && nc < matrix[0].length && matrix[nr][nc] == -1) {\n                      matrix[nr][nc] = matrix[pq.x][pq.y] + 1;\n                      que.add(new Pair(nr, nc));\n                  }\n              }\n          }\n          return matrix;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix"}